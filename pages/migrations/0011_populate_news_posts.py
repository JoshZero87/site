# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-10-24 21:56
from __future__ import unicode_literals

from bs4 import BeautifulSoup
from django.db import migrations
import datetime
import requests


def populate_news_pages(apps, schema_editor):

    from pages.models import NewsIndex, NewsPost

    pages_to_create = [
        "our-revolution-announces-formation-of-board", 
        "our-revolution-announces-second-round-of-endorsements", 
        "founding-statement-of-our-revolution-board", 
        "our-revolution-on-ma-primary-wins", 
        "our-revolution-announces-next-round-of-endorsements", 
        "our-revolution-statement-on-ri-and-ny", 
        "our-revolution-announces-latest-round-of-endorsements", 
        "our-revolution-statement-on-shootings", 
        "josh-fox-and-our-revolution-team-up", 
        "our-revolution-announces-more-endorsements", 
        "our-revolution-announces-final-round-of-endorsements", 
        "our-revolution-statement-on-shailene-woodley-arrest", 
        "our-revolution-substantive-discussion", 
        "our-revolution-reacts-final-presidential-debate", 
    ]

    index = NewsIndex.objects.first()

    post_type_by_title = dict(zip([choice[1] for choice in NewsPost.POST_TYPE_CHOICES], [choice[0] for choice in NewsPost.POST_TYPE_CHOICES]))

    for page in pages_to_create:

        req = requests.get("https://ourrevolution.com/press/%s" % page)
        soup = BeautifulSoup(req.text, "html5lib")

        go_live_at = '2016-08-08'

        data = {
            'title': soup.select('h1')[0].text,
            'slug': page,
            'post_type': post_type_by_title[soup.select('.article-type')[0].text.strip()],
            'go_live_at': go_live_at,
            'body': unicode(soup.select('.home-section div')[0]),
            'header_photo_byline': ''
        }

        paragraph = 0
        if soup.select('.home-section div p')[paragraph].text.startswith('WASHINGTON'):
            paragraph += 1

        data['abstract'] = soup.select('.home-section div p')[paragraph].text

        print "saving %s / %s" % (data['title'], req.url)

        post = NewsPost(**data)

        index.add_child(instance=post)



def truncate_news_pages(apps, schema_editor):
    from pages.models import NewsPost

    NewsPost.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0010_populate_news_index'),
    ]

    operations = [
        migrations.RunPython(populate_news_pages, reverse_code=truncate_news_pages)
    ]
