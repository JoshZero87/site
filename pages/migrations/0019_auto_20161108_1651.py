# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-11-08 16:51
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.wagtailcore.fields


def populate_all_the_things(apps, schema_editor):

    from pages.models import IndexPage

    # pages
    CandidateRace = apps.get_model('pages', 'CandidateRace')
    InitiativeRace = apps.get_model('pages', 'InitiativeRace')
    CandidateRaceSnippet = apps.get_model('pages', 'CandidateRaceSnippet')
    InitiativeeRaceSnippet = apps.get_model('pages', 'InitiativeeRaceSnippet')

    # ElectionTrackingPage = apps.get_model('pages', 'ElectionTrackingPage')
    from pages.models import ElectionTrackingPage

    # data
    Candidate = apps.get_model('endorsements', 'Candidate')
    Initiative = apps.get_model('endorsements', 'Initiative')

    index = IndexPage.objects.get(title='Our Revolution')

    election_page = ElectionTrackingPage(live=False, title="Election 2016", abstract="Election 2016", body="Election 2016")

    index.add_child(instance=election_page)


    # now, populate snippets
    
    for candidate in Candidate.objects.all():
        race = CandidateRace.objects.create(candidate=candidate)
        CandidateRaceSnippet.objects.create(page_id=election_page.id, candidate_race=race)

    for initiative in Initiative.objects.all():
        race = InitiativeRace.objects.create(initiative=initiative)
        InitiativeeRaceSnippet.objects.create(page_id=election_page.id, initiative_race=race)



class Migration(migrations.Migration):

    dependencies = [
        ('endorsements', '0007_auto_20161025_0022'),
        ('wagtailcore', '0030_index_on_pagerevision_created_at'),
        ('wagtailimages', '0015_fill_filter_spec_field'),
        ('pages', '0018_auto_20161107_1810'),
    ]

    operations = [
        migrations.CreateModel(
            name='CandidateRace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, choices=[(None, ''), ('win', 'Win'), ('lose', 'Lose')], max_length=5, null=True)),
                ('candidate_votes', models.IntegerField(default=0)),
                ('opponent_votes', models.IntegerField(default=0)),
                ('other_votes', models.IntegerField(default=0)),
                ('margin_win_loss', models.CharField(blank=True, max_length=128, null=True)),
                ('source', models.URLField(blank=True, null=True)),
                ('notes', wagtail.wagtailcore.fields.RichTextField(blank=True)),
                ('candidate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='endorsements.Candidate')),
            ],
        ),
        migrations.CreateModel(
            name='CandidateRaceSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('candidate_race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='pages.CandidateRace')),
            ],
            options={
                'verbose_name': 'Candidate Race',
            },
        ),
        migrations.CreateModel(
            name='ElectionTrackingPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('abstract', wagtail.wagtailcore.fields.RichTextField()),
                ('body', wagtail.wagtailcore.fields.RichTextField()),
                ('social_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='InitiativeeRaceSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'Initiative Race',
            },
        ),
        migrations.CreateModel(
            name='InitiativeRace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, choices=[(None, ''), ('win', 'Win'), ('lose', 'Lose')], max_length=5, null=True)),
                ('initiative_votes', models.IntegerField(default=0)),
                ('opponent_votes', models.IntegerField(default=0)),
                ('other_votes', models.IntegerField(default=0)),
                ('margin_win_loss', models.CharField(blank=True, max_length=128, null=True)),
                ('source', models.URLField(blank=True, null=True)),
                ('notes', wagtail.wagtailcore.fields.RichTextField(blank=True)),
                ('initiative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='endorsements.Initiative')),
            ],
        ),
        migrations.AddField(
            model_name='initiativeeracesnippet',
            name='initiative_race',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='pages.InitiativeRace'),
        ),
        migrations.AddField(
            model_name='initiativeeracesnippet',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='initiative_race_snippets', to='pages.ElectionTrackingPage'),
        ),
        migrations.AddField(
            model_name='candidateracesnippet',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_race_snippets', to='pages.ElectionTrackingPage'),
        ),
        migrations.RunPython(populate_all_the_things, reverse_code=migrations.RunPython.noop)
    ]
